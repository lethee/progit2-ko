//////////////////////////
==== Git and Mercurial
//////////////////////////
==== Git과 Mercurial

(((Interoperation with other VCSs, Mercurial)))
(((Mercurial)))
//////////////////////////
The DVCS universe is larger than just Git.
In fact, there are many other systems in this space, each with their own angle on how to do distributed version control correctly.
Apart from Git, the most popular is Mercurial, and the two are very similar in many respects.
//////////////////////////
DVCS 세상에 Git만 존재하는 것은 아니다.
사실 Git 이외에도 다양한 시스템이 존재하는데 각자가 나름의 철학 대로 분산 버전 관리 시스템을 구현했다.
Git 이외에는 Mercurial이 가장 많이 사용되는 분산 버전 관리 시스템이며 Git과 닮은 점도 많다.

//////////////////////////
The good news, if you prefer Git's client-side behavior but are working with a project whose source code is controlled with Mercurial, is that there's a way to use Git as a client for a Mercurial-hosted repository.
Since the way Git talks to server repositories is through remotes, it should come as no surprise that this bridge is implemented as a remote helper.
The project's name is git-remote-hg, and it can be found at https://github.com/felipec/git-remote-hg[].
//////////////////////////
Mercurial로 코드를 관리하는 프로젝트에서 클라이언트로 Git을 쓰고자 하는 사람에게도 좋은 소식이 있다. Git은 Mercurial 클라이언트로 동작할 수 있다.
Mercurial을 위한 Bridge는 리모트 헬퍼로 구현돼 있는데 Git은 리모트를 통해서 서버 저장소의 코드를 가져와서 그렇다.
이 프로젝트의 이름은 git-remote-hg이라고 하며 https://github.com/felipec/git-remote-hg[]에 있다.

===== git-remote-hg

//////////////////////////
First, you need to install git-remote-hg.
This basically entails dropping its file somewhere in your path, like so:
//////////////////////////
우선 git-remote-hg을 설치한다.
아래처럼 PATH 실행경로에 포함된 경로중 아무데나 git-remote-hg 파일을 저장하고 실행 권한을 준다.

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

//////////////////////////
…assuming `~/bin` is in your `$PATH`.
Git-remote-hg has one other dependency: the `mercurial` library for Python.
If you have Python installed, this is as simple as:
//////////////////////////
예제에서는 `~/bin` 디렉토리가 `$PATH` 실행경로에 포함되어 있다고 가정한다.
git-remote-hg은 `mercurial` Python 라이브러리를 필요로 한다.
Python이 설치되어있다면 아래처럼 Mercurial 라이브러리를 설치한다.

[source,console]
----
$ pip install mercurial
----

//////////////////////////
(If you don't have Python installed, visit https://www.python.org/[] and get it first.)
//////////////////////////
(Python 설치가 안돼 있다면 https://www.python.org/[] 사이트에서 다운로드 받아 설치한다.)

//////////////////////////
The last thing you'll need is the Mercurial client.
Go to http://mercurial.selenic.com/[] and install it if you haven't already.
//////////////////////////
마지막으로 Mercurial 클라이언트도 설치해야 한다.
http://mercurial.selenic.com/[] 사이트에서 다운로드 받아 설치할 수 있다.

//////////////////////////
Now you're ready to rock.
All you need is a Mercurial repository you can push to.
Fortunately, every Mercurial repository can act this way, so we'll just use the "hello world" repository everyone uses to learn Mercurial:
//////////////////////////
이렇게 필요한 라이브러리와 프로그램을 설치하고 나면 준비가 끝난다.
이제 필요한 것은 소스코드를 Push할 Mercurial 저장소다.
여기 예제에서는 Mercurial을 익힐 때 많이 쓰는 "hello world" 저장소를 로컬에 복제하고 마치 리모트 저장소인 것 처럼 사용한다.

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

//////////////////////////
===== Getting Started
//////////////////////////
===== 시작하기

//////////////////////////
Now that we have a suitable ``server-side'' repository, we can go through a typical workflow.
As you'll see, these two systems are similar enough that there isn't much friction.
//////////////////////////
이제 Push 할 수 있는 ``서버''(?) 저장소가 준비됐고 여러가지 작업을 해 볼 수 있다.
잘 알려진 대로 Git과 Mercurial의 철학이나 사용방법은 크게 다르지 않다.

//////////////////////////
As always with Git, first we clone:
//////////////////////////
Git에서 늘 하던 것처럼 처음에는 Clone을 먼저 한다.

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
You'll notice that working with a Mercurial repository uses the standard `git clone` command.
That's because git-remote-hg is working at a fairly low level, using a similar mechanism to how Git's HTTP/S protocol is implemented (remote helpers).
Since Git and Mercurial are both designed for every client to have a full copy of the repository history, this command makes a full clone, including all the project's history, and does it fairly quickly.
//////////////////////////
리모트 저장소가 hg로 시작하는 Mercurial 저장소지만 `git clone` 명령으로 쉽게 Clone할 수 있다.
사실 내부에서는 git-remote-hg Bridge가 Git에 포함된 HTTP/S 프로토콜(리모트 헬퍼)과 비슷하게 동작한다.
Git과 마찬가지로 Mercurial또한 모든 클라이언트가 전체 저장소 히스토리를 복제(Clone)해서 사용하도록 만들어졌기 때문에 Clone 명령으로 히스토리를 포함한 저장소 전체를 가져온다. 예제 프로젝트는 크기가 작아서 저장소를 금방 clone한다.

//////////////////////////
The log command shows two commits, the latest of which is pointed to by a whole slew of refs.
It turns out some of these aren't actually there.
Let's take a look at what's actually in the `.git` directory:
//////////////////////////
log 명령으로 커밋 두 개를 볼 수 있으며 가장 최근 커밋으로는 여러 Ref 포인터로 가리키고 있다.
Ref중 일부는 실제 존재하지 않을 수도 있다.
`.git` 디렉토리가 실제로 어떻게 구성돼 있는지 보자.

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

//////////////////////////
Git-remote-hg is trying to make things more idiomatically Git-esque, but under the hood it's managing the conceptual mapping between two slightly different systems.
The `refs/hg` directory is where the actual remote refs are stored.
For example, the `refs/hg/origin/branches/default` is a Git ref file that contains the SHA starting with ``ac7955c'', which is the commit that `master` points to.
So the `refs/hg` directory is kind of like a fake `refs/remotes/origin`, but it has the added distinction between bookmarks and branches.
//////////////////////////
git-remote-hg는 Git 스타일로 동작하도록 만들어 주는데 속으로 하는 일은 Git과 Mercurial을 매핑해 준다.
리모트 Ref를 `refs/hg` 디렉토리에 저장한다.
예를 들어 `refs/hg/origin/branches/default`는 Git Ref 파일로 내용은 `master` 브랜치가 가리키는 커밋인 ``ac7955c''로 시작하는 SHA 해시 값이다.
`refs/hg` 디렉토리는 일종의 `refs/remotes/origin` 같은 것이지만 북마크와 브랜치가 구분된다는 점이 다르다.

//////////////////////////
The `notes/hg` file is the starting point for how git-remote-hg maps Git commit hashes to Mercurial changeset IDs.
Let's explore a bit:
//////////////////////////
`notes/hg` 파일은 git-remote-hg가 Git 커밋을 Mercurial Changeset ID와 매핑을 하기 위한 시작지점이다.
살짝 더 안을 들여다보면.

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

//////////////////////////
So `refs/notes/hg` points to a tree, which in the Git object database is a list of other objects with names.
`git ls-tree` outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named ``ac9117f'' (the SHA-1 hash of the commit pointed to by `master`), with contents ``0a04b98'' (which is the ID of the Mercurial changeset at the tip of the `default` branch).
//////////////////////////
`refs/notes/hg` 파일은 트리 하나를 가리킨다. 이 트리는 다른 객체와 그 이름의 목록인 Git 객체 데이터베이스다.
`git ls-tree` 명령은 이 트리 객체 안에 포함된 모드, 타입, 객체 해시, 파일 이름으로 된 여러 항목을 보여준다.
트리 객체에 포함된 한 항목을 더 자세히 살펴보면 ``ac9117f'' 으로 시작하는 이름(`master`가 가리키는 커밋의 SHA-1 해시)의 Blob 객체를 확인할 수 있다. ``ac9117f''이 가리키는 내용은 ``0a04b98''로 시작하는 해시로 `default` 브랜치가 가리키는 Mercurial Changeset ID이다.

//////////////////////////
The good news is that we mostly don't have to worry about all of this.
The typical workflow won't be very different from working with a Git remote.
//////////////////////////
이런 내용은 몰라도 되고 모른다고 걱정할 필요 없다.
일반적인 Workflow에서 Git 리모트를 사용하는 것과 크게 다르지 않다.

//////////////////////////
There's one more thing we should attend to before we continue: ignores.
Mercurial and Git use a very similar mechanism for this, but it's likely you don't want to actually commit a `.gitignore` file into a Mercurial repository.
Fortunately, Git has a way to ignore files that's local to an on-disk repository, and the Mercurial format is compatible with Git, so you just have to copy it over:
//////////////////////////
다만 한가지, 다음 내용으로 넘어가기 전에 Ignore 파일을 살펴보자.
Mercurial과 Git의 Ignore 파일은 방식이 거의 비슷하지만 아무래도 `.gitignore` 파일을 Mercurial 저장소에 넣기는 좀 껄끄럽다.
다행히도 Mercurial의 Ignore 파일 패턴의 형식은 Git과 동일해서 아래와 같이 복사하기만 하면 된다.

[source,console]
----
$ cp .hgignore .git/info/exclude
----

//////////////////////////
The `.git/info/exclude` file acts just like a `.gitignore`, but isn't included in commits.
//////////////////////////
`.git/info/exclude` 파일은 `.gitignore` 파일처럼 동작하지만 커밋할 수 없다.

===== Workflow

//////////////////////////
Let's assume we've done some work and made some commits on the `master` branch, and you're ready to push it to the remote repository.
Here's what our repository looks like right now:
//////////////////////////
이런저런 작업을하고 `master` 브랜치에 커밋하면 원격 저장소에 Push할 준비가 된다.
현재 저장소 히스토리를 살펴보면 아래와 같다.

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
Our `master` branch is two commits ahead of `origin/master`, but those two commits exist only on our local machine.
Let's see if anyone else has been doing important work at the same time:
//////////////////////////
`master` 브랜치는 `origin/master` 브랜치보다 커밋이 두 개를 많으며 이 두 커밋은 로컬에만 존재한다.
그와 동시에 누군가가 커밋해서 리모트 저장소에 Push했다고 가정해보자.

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
Since we used the `--all` flag, we see the ``notes'' refs that are used internally by git-remote-hg, but we can ignore them.
The rest is what we expected; `origin/master` has advanced by one commit, and our history has now diverged.
Unlike the other systems we work with in this chapter, Mercurial is capable of handling merges, so we're not going to do anything fancy.
//////////////////////////
`--all` 옵션으로 히스토리를 보면 ``notes'' Ref도 볼 수 있는데 git-remote-hg에서 내부적으로 사용하는 것이므로 유저는 신경쓰지 않아도 된다.
나머지 내용은 예상한 대로다. `origin/master` 브랜치에 커밋 하나가 추가되어 있어 히스토리가 갈라졌다.
이 장에서 살펴보는 다른 버전관리 시스템과는 달리 Mercurial은 Merge를 충분히 잘 다루기 때문에 특별히 더 할 일이 없다.

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

//////////////////////////
Perfect.
We run the tests and everything passes, so we're ready to share our work with the rest of the team:
//////////////////////////
완벽하고 멋져.
이렇게 Merge하고 나서 테스트가 통과한다면 정말로 Push하고 공유할 준비가 끝난 것이다.

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

//////////////////////////
That's it!
If you take a look at the Mercurial repository, you'll see that this did what we'd expect:
//////////////////////////
정말 완벽하게 멋져!
Mercurial 저장소 히스토리를 살펴보면 기대한대로 모든 것이 멋지게 끝난 것을 확인할 수 있다.

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

//////////////////////////
The changeset numbered _2_ was made by Mercurial, and the changesets numbered _3_ and _4_ were made by git-remote-hg, by pushing commits made with Git.
//////////////////////////
Changeset _2_ 번은 Mercurial로 만든 Changeset이다. _3_ 번과 _4_ 번 Changeset은 git-remote-hg로 만든 Changeset이고 Git으로 Push한 커밋이다.

//////////////////////////
===== Branches and Bookmarks
//////////////////////////
===== 브랜치와 북마크

//////////////////////////
Git has only one kind of branch: a reference that moves when commits are made.
In Mercurial, this kind of a reference is called a ``bookmark,'' and it behaves in much the same way as a Git branch.
//////////////////////////
Git 브랜치는 한 종류 뿐이다. Git 브랜치는 새 커밋이 추가되면 자동으로 마지맛 커밋으로 이동하는 포인터다.
Mercurial에서는 이런 레퍼런스를 ``북마크''라고 부르는데 하는 행동은 Git의 브랜치와 같다.

//////////////////////////
Mercurial's concept of a ``branch'' is more heavyweight.
The branch that a changeset is made on is recorded _with the changeset_, which means it will always be in the repository history.
Here's an example of a commit that was made on the `develop` branch:
//////////////////////////
Mercurial에서 사용하는 ``브랜치''의 개념은 Git보다 좀 더 무겁다.
Mercurial은 Changeset에 브랜치도 함께 저장한다. 즉 브랜치는 히스토리에 영원히 기록된다.
`develop` 브랜치에 커밋을 하나 만드는 예제를 살펴보자.

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

//////////////////////////
Note the line that begins with ``branch''.
Git can't really replicate this (and doesn't need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares.
//////////////////////////
``branch''로 시작하는 줄이 있는 것을 볼 수 있다.
Git은 이런 방식을 흉내낼 수(흉내낼 필요도) 없다(Git의 ref로 표현할 수는 있겠다). 하지만 Mercurial이 필요로 하는 정보이기에 git-remote-hg는 이런 비슷한 정보가 필요하다.

//////////////////////////
Creating Mercurial bookmarks is as easy as creating Git branches.
On the Git side:
//////////////////////////
Mercurial 북마크를 만드는 것은 Git의 브랜치를 만드는 것과 같이 쉽다.
Git으로 Clone한 Mercurial 저장소에 아래와 같이 브랜치를 Push한다.

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

//////////////////////////
That's all there is to it.
On the Mercurial side, it looks like this:
//////////////////////////
이렇게만 해도 북마크가 생성된다.
Mercurial로 저장소 내용을 확인하면 아래와 같다.

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

//////////////////////////
Note the new `[featureA]` tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can't delete a bookmark from the Git side (this is a limitation of remote helpers).
//////////////////////////
`[featureA]` 태그가 리비전 5에 생긴 것을 볼 수 있다.
Git을 클라이언트로 사용하는 저장소에서는 Git 브랜치처럼 사용한다. Git 클라이언트 저장소에서 한 가지 할 수 없는 것은 서버의 북마크를 삭제하지 못 한다(이는 리모트 헬퍼의 제약사항이다).

//////////////////////////
You can work on a ``heavyweight'' Mercurial branch also: just put a branch in the `branches` namespace:
//////////////////////////
Git보다 무거운 Mercurial 브랜치도 물론 사용 가능하다. 브랜치 이름에 `branches` 네임스페이스를 사용하면 된다.

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

//////////////////////////
Here's what that looks like on the Mercurial side:
//////////////////////////
위의 내용을 Mercurial에서 확인하면 아래와 같다.

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

//////////////////////////
The branch name ``permanent'' was recorded with the changeset marked _7_.
//////////////////////////
``permanent'' 라는 브랜치가 Changeset _7_ 번에 기록됐다.

//////////////////////////
From the Git side, working with either of these branch styles is the same: just checkout, commit, fetch, merge, pull, and push as you normally would.
One thing you should know is that Mercurial doesn't support rewriting history, only adding to it.
Here's what our Mercurial repository looks like after an interactive rebase and a force-push:
//////////////////////////
Mercurial 저장소를 Clone한 Git 저장소에서는 Git 브랜치를 쓰듯 Checkout, Checkout, Fetch, Merge, Pull 명령을 그대로 쓰면 된다.
반드시 기억해야 할 게 하나 있는데 Mercurial은 히스토리를 재작성을 지원하지 않고 단순히 추가된다.
Git으로 Rebase를 하고 강제로 Push하면 Mercurial 저장소의 모습은 아래와 같아진다.

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

//////////////////////////
Changesets _8_, _9_, and _10_ have been created and belong to the `permanent` branch, but the old changesets are still there.
This can be *very* confusing for your teammates who are using Mercurial, so try to avoid it.
//////////////////////////
Changeset _8_, _9_, _10_이 생성됐고 `permanent` 브랜치에 속한다. 하지만 예전에 Push 했던 Changeset들이 그대로 남아있다.
그러면 Mercurial 저장소를 공유하는 동료들은 혼란스럽다. 이딴식으로 커밋을 재작성 하고 강제로 Push하지 말지어다.


//////////////////////////
===== Mercurial Summary
//////////////////////////
===== Mercurial 요약

//////////////////////////
Git and Mercurial are similar enough that working across the boundary is fairly painless.
If you avoid changing history that's left your machine (as is generally recommended), you may not even be aware that the other end is Mercurial.
//////////////////////////
Git과 Mercurial은 시스템이 크게 다르지 않아서 쉽게 경계를 넘나들 수 있다.
이미 리모트로 떠나 보낸 커밋을 재작성하지 않는다면(물론 Git도 마찬가지) 지금 작업하고 있는 저장소가 Git인지 Mercurial인지 몰라도 된다.
