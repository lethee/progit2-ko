[[_custom_importer]]
//////////////////////////
==== A Custom Importer
//////////////////////////
==== 직접 Importer 만들기

(((git commands, fast-import)))
(((Importing, from others)))
//////////////////////////
If your system isn't one of the above, you should look for an importer online – quality importers are available for many other systems, including CVS, Clear Case, Visual Source Safe, even a directory of archives.
If none of these tools works for you, you have a more obscure tool, or you otherwise need a more custom importing process, you should use `git fast-import`.
This command reads simple instructions from stdin to write specific Git data.
It's much easier to create Git objects this way than to run the raw Git commands or try to write the raw objects (see <<_git_internals>> for more information).
This way, you can write an import script that reads the necessary information out of the system you're importing from and prints straightforward instructions to stdout.
You can then run this program and pipe its output through `git fast-import`.
//////////////////////////
사용하는 VCS가 앞서 살펴본 시스템이 아니면 인터넷에서 적당한 Importer를 찾아봐야 한다. CVS, Clear Case, Visual Source Safe 같은 시스템용 Importer가 좋은게 많다. 심지어 단순히 디렉토리 아카이브용 Importer에도 좋은게 있다.
사람들이 잘 안쓰는 시스템을 사용하고 있는데 적당한 Importer를 못 찾았거나 부족해서 좀 더 고쳐야 한다면 `git fast-import`를 사용한다.
이 명령은 표준입력으로 데이터를 입력받는다.
<<_git_internals>> 에서 배우는 저수준 명령어와 내부 객체를 직접 다루는 것보다 훨씬 쉽다.
먼저 사용하는 VCS에서 필요한 정보를 수집해서 표준출력으로 출력하는 스크립트를 만든다.
그리고 그 결과를 `git fast-import`의 표준입력으로 보낸다.

//////////////////////////
To quickly demonstrate, you'll write a simple importer.
Suppose you work in `current`, you back up your project by occasionally copying the directory into a time-stamped `back_YYYY_MM_DD` backup directory, and you want to import this into Git.
Your directory structure looks like this:
//////////////////////////
간단한 Importer를 작성해보자.
`current` 디렉토리에서 작업하고 `back_YYYY_MM_DD`이라는 디렉토리에 백업하면서 진행했던 프로젝트를 살펴 보자.
Importer를 만들 때 디렉토리 상태는 아래와 같다.

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

//////////////////////////
In order to import a Git directory, you need to review how Git stores its data.
As you may remember, Git is fundamentally a linked list of commit objects that point to a snapshot of content.
All you have to do is tell `fast-import` what the content snapshots are, what commit data points to them, and the order they go in.
Your strategy will be to go through the snapshots one at a time and create commits with the contents of each directory, linking each commit back to the previous one.
//////////////////////////
Importer를 만들기 전에 우선 Git이 어떻게 데이터를 저장하는지 알아야 한다.
이미 알고 있듯이 Git은 기본적으로 스냅샷을 가리키는 커밋 개체가 연결된 리스트이다.
스냅샷이 뭐고, 그걸 가리키는 커밋은 또 뭐고, 그 커밋의 순서가 어떻게 되는지 `fast-import`에 알려 줘야 한다. 이 것이 해야할 일의 전부다.
그러면 디렉토리마다 스냅샷을 만들고, 그 스냅샷을 가리키는 커밋 개체를 만들고, 이전 커밋과 연결 시킨다.

//////////////////////////
As we did in <<_an_example_git_enforced_policy>>, we'll write this in Ruby, because it's what we generally work with and it tends to be easy to read.
You can write this example pretty easily in anything you're familiar with – it just needs to print the appropriate information to `stdout`.
And, if you are running on Windows, this means you'll need to take special care to not introduce carriage returns at the end your lines – git fast-import is very particular about just wanting line feeds (LF) not the carriage return line feeds (CRLF) that Windows uses.
//////////////////////////
<<_an_example_git_enforced_policy>> 절에서 했던 것 처럼 Ruby로 스크립트를 작성한다. 책에서 계속 스크립트를 작성할 때 Ruby로 해왔고, 읽기도 쉽기에 Ruby를 쓴다.
하지만 자신에게 익숙한 것을 사용해서 표준출력으로 적절한 정보만 출력할 수 있으면 된다.
그리고 윈도에서는 줄바꿈 문자에 CR(Carriage Return) 문자가 들어가지 않도록 주의해야 한다. `git fast-import` 명령은 윈도에서도 줄바꿈 문자로 CRLF 문자가 아니라 LF(Line Feed) 문자만 허용한다.

//////////////////////////
To begin, you'll change into the target directory and identify every subdirectory, each of which is a snapshot that you want to import as a commit.
You'll change into each subdirectory and print the commands necessary to export it.
Your basic main loop looks like this:
//////////////////////////
우선 해당 디렉토리로 이동해서 어떤 디렉토리가 있는지 살펴본다. 하위 디렉토리마다 스냅샷 하나가 되고 커밋 하나가 된다.
하위 디렉토리를 이동하면서 필요한 정보를 출력한다.
기본적인 로직은 아래와 같다.

[source,ruby]
----
last_mark = nil

# loop through the directories
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # move into the target directory
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

//////////////////////////
You run `print_export` inside each directory, which takes the manifest and mark of the previous snapshot and returns the manifest and mark of this one; that way, you can link them properly.
``Mark'' is the `fast-import` term for an identifier you give to a commit; as you create commits, you give each one a mark that you can use to link to it from other commits.
So, the first thing to do in your `print_export` method is generate a mark from the directory name:
//////////////////////////
각 디렉토리에서 `print_export`를 호출하는데 이 함수는 아규먼트로 디렉토리와 이전 스냅샷 Mark를 전달받고 현 스냅샷 Mark를 반환한다. 그래서 적절히 연결 시킬 수 있다.
`fast-import`에서 ``Mark''는 커밋의 식별자를 말한다. 커밋을 하나 만들면 ``Mark''도 같이 만들어 이 ``Mark''로 다른 커밋과 연결 시킨다.
그래서 `print_export`에서 우선 해야 하는 일은 각 디렉토리 이름으로 ``Mark''를 생성하는 것이다.

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

//////////////////////////
You'll do this by creating an array of directories and using the index value as the mark, because a mark must be an integer.
Your method looks like this:
//////////////////////////
Mark는 정수 값을 사용해야 하기 때문에 디렉토리를 배열에 담고 그 인덱스를 Mark로 사용한다.
아래와 같이 작성한다.

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

//////////////////////////
Now that you have an integer representation of your commit, you need a date for the commit metadata.
Because the date is expressed in the name of the directory, you'll parse it out.
The next line in your `print_export` file is
//////////////////////////
각 커밋을 가리키는 정수 Mark를 만들었고 다음은 커밋 메타데이터에 넣을 날짜 정보가 필요하다.
이 날짜는 디렉토리 이름에 있는 것을 가져다 사용한다.
`print_export`의 두 번째 줄은 아래와 같다.

[source,ruby]
----
date = convert_dir_to_date(dir)
----

//////////////////////////
where `convert_dir_to_date` is defined as
//////////////////////////
`convert_dir_to_date`는 아래와 같이 정의한다.

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

//////////////////////////
That returns an integer value for the date of each directory.
The last piece of meta-information you need for each commit is the committer data, which you hardcode in a global variable:
//////////////////////////
시간는 정수 형태로 반환한다.
마지막으로 메타정보에 필요한 것은 Author인데 이 것은 전역 변수 하나로 설정해서 사용한다.

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

//////////////////////////
Now you're ready to begin printing out the commit data for your importer.
The initial information states that you're defining a commit object and what branch it's on, followed by the mark you've generated, the committer information and commit message, and then the previous commit, if any.
The code looks like this:
//////////////////////////
이제 Importer에서 출력할 커밋 데이터는 다 준비했다. 이제 출력해보자.
사용할 브랜치, 해당 커밋과 관련된 Mark, 커미터 정보, 커밋 메시지, 이전 커밋을 출력한다.
코드로 만들면 아래와 같다.

[source,ruby]
----
# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

//////////////////////////
You hardcode the time zone (-0700) because doing so is easy.
If you're importing from another system, you must specify the time zone as an offset.
The commit message must be expressed in a special format:
//////////////////////////
우선 시간대(-0700) 정보는 편의상 하드코딩으로 처리했다.
각자의 시간대에 맞는 오프셋을 설정해야 한다.
커밋 메시지는 아래와 같은 형식을 따라야 한다.

[source]
----
data (size)\n(contents)
----

//////////////////////////
The format consists of the word data, the size of the data to be read, a newline, and finally the data.
Because you need to use the same format to specify the file contents later, you create a helper method, `export_data`:
//////////////////////////
이 형식은 ``data''라는 단어, 읽을 데이터의 크기, 줄바꿈 문자, 실 데이터로 구성된다.
이 형식을 여러 곳에서 사용해야 하므로 `export_data`라는 메소드로 만들어 놓는게 좋다.

[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

//////////////////////////
All that's left is to specify the file contents for each snapshot.
This is easy, because you have each one in a directory – you can print out the `deleteall` command followed by the contents of each file in the directory.
Git will then record each snapshot appropriately:
//////////////////////////
이제 남은 것은 스냅샷에 파일 내용를 포함시키는 것 뿐이다.
디렉토리로 구분돼 있기 때문에 어렵지 않다. 우선 `deleteall`이라는 명령을 출력하고 그 뒤에 모든 파일의 내용을 출력한다.
그러면 Git은 스냅샷을 잘 저장한다.

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

//////////////////////////
Note:  Because many systems think of their revisions as changes from one commit to another, fast-import can also take commands with each commit to specify which files have been added, removed, or modified and what the new contents are.
You could calculate the differences between snapshots and provide only this data, but doing so is more complex – you may as well give Git all the data and let it figure it out.
If this is better suited to your data, check the `fast-import` man page for details about how to provide your data in this manner.
//////////////////////////
Note: 대부분의 VCS는 리비전을 커밋간의 변화로 생각하기 때문에 fast-import에 추가/삭제/변경된 부분만 입력할 수도 있다.
스냅샷 사이의 차이를 구해서 fast-import에 넘길 수도 있지만 훨씬 복잡하다. 줄 수 있는 데이터는 전부 Git에 줘서 Git이 계산하게 해야 한다.
꼭 이렇게 해야 한다면 어떻게 데이터를 전달해야 하는지 `fast-import`의 ManPage를 참고하라.

//////////////////////////
The format for listing the new file contents or specifying a modified file with the new contents is as follows:
//////////////////////////
파일 정보와 내용은 아래와 같은 형식으로 출력한다.

[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

//////////////////////////
Here, 644 is the mode (if you have executable files, you need to detect and specify 755 instead), and inline says you'll list the contents immediately after this line.
Your `inline_data` method looks like this:
//////////////////////////
644는 파일의 모드를 나타낸다(실행파일이라면 755로 지정해줘야 한다). inline 은 다음 줄 부터는 파일 내용이라는 말하는 것이다.
`inline_data` 메소드는 아래와 같다.

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

//////////////////////////
You reuse the `export_data` method you defined earlier, because it's the same as the way you specified your commit message data.
//////////////////////////
파일 내용은 커밋 메시지랑 같은 방법을 사용하기 때문에 앞서 만들어 놓은 `export_data` 메소드를 다시 이용한다.

//////////////////////////
The last thing you need to do is to return the current mark so it can be passed to the next iteration:
//////////////////////////
마지막으로 다음 커밋에 사용할 현 Mark 값을 반환한다.

[source,ruby]
----
return mark
----

[NOTE]
//////////////////////////
====
If you are running on Windows you'll need to make sure that you add one extra step.
As mentioned before, Windows uses CRLF for new line characters while git fast-import expects only LF.
To get around this problem and make git fast-import happy, you need to tell ruby to use LF instead of CRLF:

[source,ruby]
----
$stdout.binmode
----
====
//////////////////////////
====
윈도에서 실행할 때는 추가 작업이 하나 더 필요하다.
앞에서 얘기했지만 윈도는 CRLF를 사용하지만 `git fast-import`는 LF를 사용한다.
이 문제를 해결 하려면 Ruby가 CRLF 대신 LF를 사용하도록 알려 줘야 한다.

[source,ruby]
----
$stdout.binmode
----
====

//////////////////////////
That's it.
Here's the script in its entirety:
//////////////////////////
모든게 끝났다.
스크립트 코드는 아래와 같다:

[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end


def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end


# Loop through the directories
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # move into the target directory
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

//////////////////////////
If you run this script, you'll get content that looks something like this:
//////////////////////////
스크립트를 실행하면 아래와 같이 출력된다.

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

//////////////////////////
To run the importer, pipe this output through `git fast-import` while in the Git directory you want to import into.
You can create a new directory and then run `git init` in it for a starting point, and then run your script:
//////////////////////////
디렉토리를 하나 만들고 `git init` 명령을 실행해서 옮길 Git 프로젝트를 만든다.
그리고 그 프로젝트 디렉토리로 이동해서 이 명령의 표준출력을 `git fast-import` 명령의 표준입력으로 연결한다(pipe).

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

//////////////////////////
As you can see, when it completes successfully, it gives you a bunch of statistics about what it accomplished.
In this case, you imported 13 objects total for 4 commits into 1 branch.
Now, you can run `git log` to see your new history:
//////////////////////////
성공적으로 끝나면 여기서 보여주는 것처럼 어떻게 됐는지 통계를 보여준다.
이 경우엔 브랜치 1개와 커밋 4개 그리고 개체 13개가 임포트됐다.
이제 `git log` 명령으로 히스토리 조회가 가능하다.

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

//////////////////////////
There you go – a nice, clean Git repository.
It's important to note that nothing is checked out – you don't have any files in your working directory at first.
To get them, you must reset your branch to where `master` is now:
//////////////////////////
깔끔하게 Git 저장소가 완성됐다.
이 시점에서는 아무것도 Checkout하지 않았기 때문에 워킹 디렉토리에 아직 아무 파일도 없다.
`master` 브랜치로 Reset해서 파일을 Checkout한다.

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

//////////////////////////
You can do a lot more with the `fast-import` tool – handle different modes, binary data, multiple branches and merging, tags, progress indicators, and more.
A number of examples of more complex scenarios are available in the `contrib/fast-import` directory of the Git source code.
//////////////////////////
`fast-import` 명령으로 많은 일을 할 수 있다. 모드를 설정하고, 바이너리 데이터를 다루고, 브랜치를 여러 개 다루고, Merge하고, 태그를 달고, 진행상황을 보여 주고, 등등 무수히 많은 일을 할 수 있다.
Git 소스의 `contrib/fast-import` 디렉토리에 복잡한 상황을 다루는 예제가 많다.
