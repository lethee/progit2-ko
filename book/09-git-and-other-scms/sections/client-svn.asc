[[_git_svn]]
//////////////////////////
==== Git and Subversion
//////////////////////////
==== Git과 Subversion

(((Subversion)))(((Interoperation with other VCSs, Subversion)))
//////////////////////////
A large fraction of open source development projects and a good number of corporate projects use Subversion to manage their source code.
It's been around for more than a decade, and for most of that time was the _de facto_ VCS choice for open-source projects.
It's also very similar in many ways to CVS, which was the big boy of the source-control world before that.
//////////////////////////
많은 오픈소스와 수 많은 기업들은 Subversion으로 소스코드를 관리한다.
10여년 이상 Subversion은 가장 인기있는 오픈소스 VCS 도구였고 오픈소스 프로젝트에서 선택하는 거의 표준에 가까운 시스템이었다.
Subversion은 그 이전 시대에서 가장 많이 사용하던 CVS와 많이 닮았다.

(((git commands, svn)))(((git-svn)))
//////////////////////////
One of Git's great features is a bidirectional bridge to Subversion called `git svn`.
This tool allows you to use Git as a valid client to a Subversion server, so you can use all the local features of Git and then push to a Subversion server as if you were using Subversion locally.
This means you can do local branching and merging, use the staging area, use rebasing and cherry-picking, and so on, while your collaborators continue to work in their dark and ancient ways.
It's a good way to sneak Git into the corporate environment and help your fellow developers become more efficient while you lobby to get the infrastructure changed to support Git fully.
The Subversion bridge is the gateway drug to the DVCS world.
//////////////////////////
Git이 자랑하는 또 하나의 기능은 `git svn`이라는 양방향 Subversion 지원 도구이다.
Git을 Subversion 클라이언트로 사용할 수 있기 때문에 로컬에서는 Git의 기능을 활용하고 Push 할 때는 Subversion 서버에 Push한다.
로컬 브랜치와 Merge, Staging Area, Rebase, Cherry-pick 등의 Git 기능을 충분히 사용할 수 있다. 같이 일하는 동료는 빛 한줄기 없는 선사시대 동굴에서 일하겠지만 말이다.
`git svn`은 기업에서 git을 사용할 수 있도록 돕는 출발점이다. 우리가 Git을 도입하기 위해 기업내에서 노력하는 동안 동료가 효율적으로 환경을 바꿀 수 있도록 도움을 준다.
이 Subversion 지원 도구는 우리를 DVCS 세상으로 인도하는 붉은 알약과 같다.

===== `git svn`

//////////////////////////
The base command in Git for all the Subversion bridging commands is `git svn`.
It takes quite a few commands, so we'll show the most common while going through a few simple workflows.
//////////////////////////
Git과 Subversion을 이어주는 명령은 `git svn` 으로 시작한다.
이 명령 뒤에 추가하는 명령이 몇 가지 더 있으며 간단한 예제를 보여주고 설명한다.

//////////////////////////
It's important to note that when you're using `git svn`, you're interacting with Subversion, which is a system that works very differently from Git.
Although you *can* do local branching and merging, it's generally best to keep your history as linear as possible by rebasing your work, and avoiding doing things like simultaneously interacting with a Git remote repository.
//////////////////////////
`git svn` 명령을 사용할 때는 절름발이인 Subversion을 사용하고 있다는 점을 염두하자.
우리가 로컬 브랜치와 Merge를 맘대로 쓸 수 있다고 하더라도 최대한 일직선으로 히스토리를 유지하는것이 좋다. Git 저장소처럼 사용하지 않는다.

//////////////////////////
Don't rewrite your history and try to push again, and don't push to a parallel Git repository to collaborate with fellow Git developers at the same time.
Subversion can have only a single linear history, and confusing it is very easy.
If you're working with a team, and some are using SVN and others are using Git, make sure everyone is using the SVN server to collaborate – doing so will make your life easier.
//////////////////////////
히스토리를 재작성해서 Push하지 말아야 한다. Git을 사용하는 동료들끼리 따로 Git 저장소에 Push하지도 말아야 한다.
Subversion은 단순하게 일직선 히스토리만 가능하다.
팀원중 일부는 SVN을 사용하고 일부는 Git을 사용하는 팀이라면 SVN Server를 사용해서 협업하는 것이 좋다. 그래야 삶이 편해진다.

//////////////////////////
===== Setting Up
//////////////////////////
===== 설정하기

//////////////////////////
To demonstrate this functionality, you need a typical SVN repository that you have write access to.
If you want to copy these examples, you'll have to make a writeable copy of my test repository.
In order to do that easily, you can use a tool called `svnsync` that comes with Subversion.
For these tests, we created a new Subversion repository on Google Code that was a partial copy of the `protobuf` project, which is a tool that encodes structured data for network transmission.
//////////////////////////
`git svn`을 사용하려면 SVN 저장소가 하나 필요하다. 저장소에 쓰기 권한이 있어야 한다.
필자의 test 저장소를 복사해서 해보자.
Subversion에 포함된 `svnsync`라는 도구를 사용하여 SVN 저장소를 복사한다.
테스트용 저장소가 필요해서 Google Code에 새로 Subversion 저장소를 하나 만들었다. `protobuf` 라는 프로젝트의 일부 코드를 복사했다. `protobuf`는 네트워크 전송에 필요한 구조화된 데이터(프로토콜 같은 것들)의 인코딩을 도와주는 도구이다.

//////////////////////////
To follow along, you first need to create a new local Subversion repository:
//////////////////////////
로컬 Subversion 저장소를 하나 만든다.

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

//////////////////////////
Then, enable all users to change revprops – the easy way is to add a `pre-revprop-change` script that always exits 0:
//////////////////////////
그리고 모든 사용자가 revprops 속성을 변경할 수 있도록 항상 0을 반환하는 pre-revprop-change 스크립트를 준비한다(역주: 파일이 없거나, 다른 이름으로 되어있을 수 있다. 이 경우 아래 내용으로 새로 파일을 만들고 실행 권한을 준다).

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

//////////////////////////
You can now sync this project to your local machine by calling `svnsync init` with the to and from repositories.
//////////////////////////
이제 `svnsync init` 명령으로 다른 Subversion 저장소를 로컬로 복사할 수 있도록 지정한다.

[source,console]
----
$ svnsync init file:///tmp/test-svn http://progit-example.googlecode.com/svn/
----

//////////////////////////
This sets up the properties to run the sync.
You can then clone the code by running
//////////////////////////
이렇게 다른 저장소의 주소를 설정하면 복사할 준비가 된다.
아래 명령으로 저장소를 실제로 복사한다.

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

//////////////////////////
Although this operation may take only a few minutes, if you try to copy the original repository to another remote repository instead of a local one, the process will take nearly an hour, even though there are fewer than 100 commits.
Subversion has to clone one revision at a time and then push it back into another repository – it's ridiculously inefficient, but it's the only easy way to do this.
//////////////////////////
이 명령은 몇 분 걸리지 않는다. 저장하는 위치가 로컬이 아니라 리모트 서버라면 오래 걸린다. 커밋이 100개 이하라고 해도 오래 걸린다.
Subversion은 한번에 커밋을 하나씩 받아서 Push하기 때문에 엄청나게 비효율적이다. 하지만, 저장소를 복사하는 다른 방법은 없다.

//////////////////////////
===== Getting Started
//////////////////////////
===== 시작하기

//////////////////////////
Now that you have a Subversion repository to which you have write access, you can go through a typical workflow.
You'll start with the `git svn clone` command, which imports an entire Subversion repository into a local Git repository.
Remember that if you're importing from a real hosted Subversion repository, you should replace the `file:///tmp/test-svn` here with the URL of your Subversion repository:
//////////////////////////
이제 갖고 놀 Subversion 저장소를 하나 준비했다.
`git svn clone` 명령으로 Subversion 저장소 전체를 Git 저장소로 가져온다.
만약  Subversion 저장소가 로컬에 있는 것이 아니라 리모트 서버에 있으면 `file:///tmp/test-svn` 부분에 서버 저장소의 URL을 적어 준다.

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

//////////////////////////
This runs the equivalent of two commands – `git svn init` followed by `git svn fetch` – on the URL you provide.
This can take a while.
The test project has only about 75 commits and the codebase isn't that big, but Git has to check out each version, one at a time, and commit it individually.
For a project with hundreds or thousands of commits, this can literally take hours or even days to finish.
//////////////////////////
이 명령은 사실 SVN 저장소 주소를 주고 `git svn init`과 `git svn fetch` 명령을 순서대로 실행한 것과 같다.
이 명령은 시간이 좀 걸린다.
테스트용 프로젝트는 커밋이 75개 정도밖에 안되서 시간이 오래 걸리지 않는다. Git은 커밋을 한 번에 하나씩 일일이 기록해야 한다.
커밋이 수천개인 프로젝트라면 몇 시간 혹은 몇 일이 걸릴 수도 있다.

//////////////////////////
The `-T trunk -b branches -t tags` part tells Git that this Subversion repository follows the basic branching and tagging conventions.
If you name your trunk, branches, or tags differently, you can change these options.
Because this is so common, you can replace this entire part with `-s`, which means standard layout and implies all those options.
The following command is equivalent:
//////////////////////////
`-T trunk -b branches -t tags` 부분은 Subversion이 어떤 브랜치 구조를 가지고 있는지 Git에게 알려주는 부분이다.
Subversion 표준 형식과 다르면 이 옵션 부분에서 알맞은 이름을 지정해준다.
표준 형식을 사용한다면 간단하게 `-s` 옵션을 사용한다.
즉 아래의 명령도 같은 의미이다.

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

//////////////////////////
At this point, you should have a valid Git repository that has imported your branches and tags:
//////////////////////////
Git에서 브랜치와 태그 정보가 제대로 보이는 지 확인한다.

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

//////////////////////////
Note how this tool manages Subversion tags as remote refs.
//////////////////////////
Subversion 태그를 리모트 브랜치 처럼 관리하는 것을 알아두어야 한다.

(((git commands, show-ref)))
//////////////////////////
Let's take a closer look with the Git plumbing command `show-ref`:
//////////////////////////
Plumbing 명령어인 `show-ref` 명령으로 리모트 브랜치의 정확한 이름을 확인할 수 있다.

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

//////////////////////////
Git doesn't do this when it clones from a Git server; here's what a repository with tags looks like after a fresh clone:
//////////////////////////
Git 서버에서 Clone하면 리모트 브랜치가 아니라 태그로 관리한다. 일반적인 Git 저장소라면 아래와 같다.

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

//////////////////////////
Git fetches the tags directly into `refs/tags`, rather than treating them remote branches.
//////////////////////////
Git 서버로부터 받은 태그라면 `refs/tags`에 넣어서 관리한다.

//////////////////////////
===== Committing Back to Subversion
//////////////////////////
===== Subversion 서버에 커밋하기

//////////////////////////
Now that you have a working repository, you can do some work on the project and push your commits back upstream, using Git effectively as a SVN client.
If you edit one of the files and commit it, you have a commit that exists in Git locally that doesn't exist on the Subversion server:
//////////////////////////
자 작업할 Git 저장소는 준비했다. 무엇인가 수정하고 서버로 고친 내용을 Push해야 할 때가 왔다. Git을 Subversion의 클라이언트로 사용해서 수정한 내용을 전송한다.
어떤 파일을 수정하고 커밋을 하면 그 수정한 내용은 Git의 로컬 저장소에 저장된다. Subversion 서버에는 아직 반영되지 않는다.

[source,console]
----
$ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)
----

//////////////////////////
Next, you need to push your change upstream.
Notice how this changes the way you work with Subversion – you can do several commits offline and then push them all at once to the Subversion server.
To push to a Subversion server, you run the `git svn dcommit` command:
//////////////////////////
이제 수정한 내용을 서버로 전송한다.
Git 저장소에 여러개의 커밋을 쌓아놓고 한번에 Subversion 서버로 보낸다는 점을 잘 살펴보자.
`git svn dcommit` 명령으로 서버에 Push한다.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

//////////////////////////
This takes all the commits you've made on top of the Subversion server code, does a Subversion commit for each, and then rewrites your local Git commit to include a unique identifier.
This is important because it means that all the SHA-1 checksums for your commits change.
Partly for this reason, working with Git-based remote versions of your projects concurrently with a Subversion server isn't a good idea.
If you look at the last commit, you can see the new `git-svn-id` that was added:
//////////////////////////
이 명령은 새로 추가한 커밋을 모두 Subversion에 커밋하고 로컬 Git 커밋을 다시 만든다.
커밋을 다시 만들기 때문에 이미 저장된 커밋의 SHA-1 체크섬이 바뀐다.
그래서 리모트 Git 저장소와 Subversion 저장소를 함께 사용하면 안된다.
새로 만들어진 커밋을 살펴보면 아래와 같이 `git-svn-id`가 추가된다.

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

//////////////////////////
Notice that the SHA checksum that originally started with `4af61fd` when you committed now begins with `95e0222`.
If you want to push to both a Git server and a Subversion server, you have to push (`dcommit`) to the Subversion server first, because that action changes your commit data.
//////////////////////////
원래 `4af61fd`로 시작하는 SHA 체크섬이 지금은 `95e0222`로 시작한다.
만약 Git 서버와 Subversion 서버에 함께 Push하고 싶으면 우선 Subversion 서버에 `dcommit`으로 Push를 하고 그 다음에 Git 서버에 Push해야 한다.

//////////////////////////
===== Pulling in New Changes
//////////////////////////
===== 새로운 변경사항 받아오기

//////////////////////////
If you're working with other developers, then at some point one of you will push, and then the other one will try to push a change that conflicts.
That change will be rejected until you merge in their work.
In `git svn`, it looks like this:
//////////////////////////
다른 개발자와 함께 일하는 과정에서 다른 개발자가 Push한 상태에서 Push를 하면 충돌이 날 수 있다.
충돌을 해결하지 않으면 서버로 Push할 수 없다.
충돌이 나면 `git svn` 명령은 아래와 같이 보여준다.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

//////////////////////////
To resolve this situation, you can run `git svn rebase`, which pulls down any changes on the server that you don't have yet and rebases any work you have on top of what is on the server:
//////////////////////////
이런 상황에서는 `git svn rebase` 명령으로 이 문제를 해결한다. 이 명령은 변경사항을 서버에서 내려받고 그 다음에 로컬의 변경사항을 그 위에 적용한다.

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

//////////////////////////
Now, all your work is on top of what is on the Subversion server, so you can successfully `dcommit`:
//////////////////////////
그러면 서버 코드 위에 변경사항을 적용하기 때문에 성공적으로 `dcommit` 명령을 마칠 수 있다.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

//////////////////////////
Note that unlike Git, which requires you to merge upstream work you don't yet have locally before you can push, `git svn` makes you do that only if the changes conflict (much like how Subversion works).
If someone else pushes a change to one file and then you push a change to another file, your `dcommit` will work fine:
//////////////////////////
Push하기 전에 서버의 내용을 Merge하는 Git과 달리 `git svn`은 충돌이 날때에만 서버에 업데이트할 것이 있다고 알려 준다(Subversion 처럼). 이 점을 꼭 기억해야 한다.
만약 다른 사람이 한 파일을 수정하고 내가 그 사람과 다른 파일을 수정한다면 `dcommit`은 성공적으로 수행된다.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

//////////////////////////
This is important to remember, because the outcome is a project state that didn't exist on either of your computers when you pushed.
If the changes are incompatible but don't conflict, you may get issues that are difficult to diagnose.
This is different than using a Git server – in Git, you can fully test the state on your client system before publishing it, whereas in SVN, you can't ever be certain that the states immediately before commit and after commit are identical.
//////////////////////////
Push하고 나면 프로젝트 상태가 달라진다는 점을 기억해야 한다.
충돌이 없으면 변경사항이 바램대로 적용되지 않아도 알려주지 않는다.
이 부분이 Git과 다른 점이다. Git에서는 서버로 보내기 전에 프로젝트 상태를 전부 테스트할 수 있다. SVN은 서버로 커밋하기 전과 후의 상태가 동일하다는 것이 보장되지 않는다.

//////////////////////////
You should also run this command to pull in changes from the Subversion server, even if you're not ready to commit yourself.
You can run `git svn fetch` to grab the new data, but `git svn rebase` does the fetch and then updates your local commits.
//////////////////////////
`git svn rebase` 명령으로도 Subversion 서버의 변경사항을 가져올 수 있다. 커밋을 보낼 준비가 안됐어도 괞찮다.
`git svn fetch` 명령을 사용해도 되지만 `git svn rebase` 명령은 변경사항을 가져오고 적용까지 한 번에 해준다.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

//////////////////////////
Running `git svn rebase` every once in a while makes sure your code is always up to date.
You need to be sure your working directory is clean when you run this, though.
If you have local changes, you must either stash your work or temporarily commit it before running `git svn rebase` – otherwise, the command will stop if it sees that the rebase will result in a merge conflict.
//////////////////////////
수시로 `git svn rebase` 명령을 사용하면 로컬 코드를 항상 최신 버전으로 유지할 수 있다.
이 명령을 사용하기 전에 워킹 디렉토리를 깨끗하게 만드는 것이 좋다.
깨끗하지 못하면 Stash를 하거나 임시로 커밋하고 나서 `git svn rebase` 명령을 실행하는 것이 좋다. 깨끗하지 않으면 충돌이 나서 Rebase가 중지될 수 있다.

//////////////////////////
===== Git Branching Issues
//////////////////////////
===== Git 브랜치 문제

//////////////////////////
When you've become comfortable with a Git workflow, you'll likely create topic branches, do work on them, and then merge them in.
If you're pushing to a Subversion server via `git svn`, you may want to rebase your work onto a single branch each time instead of merging branches together.
The reason to prefer rebasing is that Subversion has a linear history and doesn't deal with merges like Git does, so `git svn` follows only the first parent when converting the snapshots into Subversion commits.
//////////////////////////
Git에 익숙한 사람이면 일을 할 때 먼저 토픽 브랜치를 만들고, 일을 끝낸 다음에, Merge하는 방식을 쓰려고 할 것이다.
하지만, `git svn`으로 Subversion 서버에 Push할 때에는 브랜치를 Merge하지 않고 Rebase해야 한다.
Subversion은 일직선 히스토리 밖에 모르고 Git의 Merge도 알지 못한다. 그래서 `git svn`은 첫 번째 부모 정보만 사용해서 Git 커밋을 Subversion 커밋으로 변경한다.

//////////////////////////
Suppose your history looks like the following: you created an `experiment` branch, did two commits, and then merged them back into `master`.
When you `dcommit`, you see output like this:
//////////////////////////
예제를 하나 살펴보자. `experiment` 브랜치를 하나 만들고 2개의 변경사항을 커밋한다.
그리고 `master` 브랜치로 Merge하고 나서 `dcommit` 명령을 수행하면 아래와 같은 모양이 된다.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

//////////////////////////
Running `dcommit` on a branch with merged history works fine, except that when you look at your Git project history, it hasn't rewritten either of the commits you made on the `experiment` branch – instead, all those changes appear in the SVN version of the single merge commit.
//////////////////////////
Merge 커밋이 들어 있는 히스토리에서 `dcommit` 명령을 실행한다. 그리고 나서 Git 히스토리를 살펴보면 `experiment` 브랜치의 커밋은 재작성되지 않았다. 대신 Merge 커밋만 SVN 서버로 전송됐을 뿐이다.

//////////////////////////
When someone else clones that work, all they see is the merge commit with all the work squashed into it, as though you ran `git merge --squash`; they don't see the commit data about where it came from or when it was committed.
//////////////////////////
누군가 이 것을 내려 받으면 `git merge --squash` 한 것 마냥 결과가 합쳐진 Merge 커밋 하나만 볼 수 있다. 다른 사람은 언제 어디서 커밋한 것인지 알 수 없다.

//////////////////////////
===== Subversion Branching
//////////////////////////
===== Subversion의 브랜치

//////////////////////////
Branching in Subversion isn't the same as branching in Git; if you can avoid using it much, that's probably best.
However, you can create and commit to branches in Subversion using git svn.
//////////////////////////
Subversion의 브랜치는 Git의 브랜치와 달라서 가능한 사용을 하지 않는 것이 좋다.
하지만 `git svn`으로도 Subversion 브랜치를 관리할 수 있다.

//////////////////////////
===== Creating a New SVN Branch
//////////////////////////
===== SVN 브랜치 만들기

//////////////////////////
To create a new branch in Subversion, you run `git svn branch [branchname]`:
//////////////////////////
Subversion 브랜치를 만들려면 `git svn branch [branchname]` 명령을 사용한다.

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

//////////////////////////
This does the equivalent of the `svn copy trunk branches/opera` command in Subversion and operates on the Subversion server.
It's important to note that it doesn't check you out into that branch; if you commit at this point, that commit will go to `trunk` on the server, not `opera`.
//////////////////////////
이 명령은 Subversion의 `svn copy trunk branches/opera` 명령과 동일하다.
이 명령은 브랜치를 Checkout해주지 않는다는 것을 주의해야 한다. 여기서 커밋하면 `opera` 브랜치가 아니라 `trunk` 브랜치에 커밋된다.

//////////////////////////
===== Switching Active Branches
//////////////////////////
===== Subversion 브랜치 넘나들기

//////////////////////////
Git figures out what branch your dcommits go to by looking for the tip of any of your Subversion branches in your history – you should have only one, and it should be the last one with a `git-svn-id` in your current branch history.
//////////////////////////
`dcommit` 명령은 어떻게 커밋 할 브랜치를 결정할까? Git은 히스토리에 있는 커밋중에서 가장 마지막으로 기록된 Subversion 브랜치를 찾는다. 즉, 현 브랜치 히스토리의 커밋 메시지에 있는 `git-svn-id` 항목을 읽는 것이기 때문에 오직 한 브랜치에만 전송할 수 있다.

//////////////////////////
If you want to work on more than one branch simultaneously, you can set up local branches to `dcommit` to specific Subversion branches by starting them at the imported Subversion commit for that branch.
If you want an `opera` branch that you can work on separately, you can run
//////////////////////////
동시에 여러 브랜치에서 작업하려면 Subversion 브랜치에 `dcommit`할 수 있는 로컬 브랜치가 필요하다. 이 브랜치는 Subversion 커밋에서 시작하는 브랜치다.
아래와 같이 `opera` 브랜치를 만들면 독립적으로 일 할 수 있다.

[source,console]
----
$ git branch opera remotes/origin/opera
----

//////////////////////////
Now, if you want to merge your `opera` branch into `trunk` (your `master` branch), you can do so with a normal `git merge`.
But you need to provide a descriptive commit message (via `-m`), or the merge will say ``Merge branch opera'' instead of something useful.
//////////////////////////
`git merge` 명령으로 `opera` 브랜치를 `trunk` 브랜치(`master` 브랜치 역할)에 Merge한다.
하지만 `-m` 옵션을 주고 적절한 커밋 메시지를 작성하지 않으면 아무짝에 쓸모없는 "Merge branch opera" 같은 메시지가 커밋된다.

//////////////////////////
Remember that although you're using `git merge` to do this operation, and the merge likely will be much easier than it would be in Subversion (because Git will automatically detect the appropriate merge base for you), this isn't a normal Git merge commit.
You have to push this data back to a Subversion server that can't handle a commit that tracks more than one parent; so, after you push it up, it will look like a single commit that squashed in all the work of another branch under a single commit.
After you merge one branch into another, you can't easily go back and continue working on that branch, as you normally can in Git.
The `dcommit` command that you run erases any information that says what branch was merged in, so subsequent merge-base calculations will be wrong – the dcommit makes your `git merge` result look like you ran `git merge --squash`.
Unfortunately, there's no good way to avoid this situation – Subversion can't store this information, so you'll always be crippled by its limitations while you're using it as your server.
To avoid issues, you should delete the local branch (in this case, `opera`) after you merge it into trunk.
//////////////////////////
`git merge` 명령으로 Merge한다는 것에 주목하자. Git은 자동으로 공통 커밋을 찾아서 Merge에 참고하기 때문에 Subversion에서 하는 것보다 Merge가 더 잘된다. 여기서 생성되는 Merge 커밋은 일반적인 Merge 커밋과 다르다.
이 커밋을 Subversion 서버에 Push해야 하지만 Subversion에서는 부모가 2개인 커밋이 있을 수 없다. 그래서 Push하면 브랜치에서 만들었던 커밋 여러개가 하나로 합쳐진(squash된) 것처럼 Push된다.
그래서 일단 Merge하면 취소하거나 해당 브랜치에서 계속 작업하기 어렵다.
`dcommit` 명령을 수행하면 Merge한 브랜치의 정보를 어쩔 수 없이 잃어버리게 된다. Merge Base도 찾을 수 없게 된다.`dcommit` 명령은 Merge한 것을 `git merge --squash`로 Merge한 것과 똑 같이 만들어 버린다.
Branch를 Merge한 정보는 저장되지 않기 때문에 이 문제를 해결할 방법이 없다.
문제를 최소화하려면 trunk에 Merge하자마자 해당 브랜치를(여기서는 `opera`) 삭제하는 것이 좋다.

//////////////////////////
===== Subversion Commands
//////////////////////////
===== Subversion 명령

//////////////////////////
The `git svn` toolset provides a number of commands to help ease the transition to Git by providing some functionality that's similar to what you had in Subversion.
Here are a few commands that give you what Subversion used to.
//////////////////////////
`git svn` 명령은 Git으로 전향하기 쉽도록 Subversion에 있는 것과 비슷한 명령어를 지원한다.
아마 여기서 설명하는 명령은 익숙할 것이다.

//////////////////////////
====== SVN Style History
//////////////////////////
====== SVN 형식의 히스토리

//////////////////////////
If you're used to Subversion and want to see your history in SVN output style, you can run `git svn log` to view your commit history in SVN formatting:
//////////////////////////
Subversion에 익숙한 사람은 Git 히스토리를 SVN 형식으로 보고 싶을 수도 있다. `git svn log` 명령은 SVN 형식으로 히스토리를 보여준다.

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

//////////////////////////
You should know two important things about `git svn log`.
First, it works offline, unlike the real `svn log` command, which asks the Subversion server for the data.
Second, it only shows you commits that have been committed up to the Subversion server.
Local Git commits that you haven't dcommited don't show up; neither do commits that people have made to the Subversion server in the meantime.
It's more like the last known state of the commits on the Subversion server.
//////////////////////////
`git svn log`명령에서 기억해야 할 것은 두 가지다.
우선 오프라인에서 동작한다는 점이다. SVN의 `svn log` 명령어는 히스토리 데이터를 조회할 때 서버가 필요하다.
둘째로 이미 서버로 전송한 커밋만 출력해준다.
아직 `dcommit` 명령으로 서버에 전송하지 않은 로컬 Git 커밋은 보여주지 않는다. Subversion 서버에는 있지만 아직 내려받지 않은 변경사항도 보여주지 않는다.
즉, 현재 알고있는 Subversion 서버의 상태만 보여준다.

//////////////////////////
====== SVN Annotation
//////////////////////////
====== SVN 어노테이션

//////////////////////////
Much as the `git svn log` command simulates the `svn log` command offline, you can get the equivalent of `svn annotate` by running `git svn blame [FILE]`.
The output looks like this:
//////////////////////////
`git svn log` 명령이 `svn log` 명령을 흉내내는 것처럼 `git svn blame [FILE]` 명령으로 `svn annotate` 명령을 흉내낼 수 있다.
실행한 결과는 아래와 같다.

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

//////////////////////////
Again, it doesn't show commits that you did locally in Git or that have been pushed to Subversion in the meantime.
//////////////////////////
다시 한번 말하지만 이 명령도 아직 서버로 전송하지 않은 커밋은 보여주지 않는다.

//////////////////////////
====== SVN Server Information
//////////////////////////
====== SVN 서버 정보

//////////////////////////
You can also get the same sort of information that `svn info` gives you by running `git svn info`:
//////////////////////////
`svn info` 명령은 `git svn info` 명령으로 대신할 수 있다.

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

//////////////////////////
This is like `blame` and `log` in that it runs offline and is up to date only as of the last time you communicated with the Subversion server.
//////////////////////////
`blame`이나 `log`명령이 오프라인으로 동작하듯이 이 명령도 오프라인으로 동작한다. 서버에서 가장 최근에 내려받은 정보를 출력한다.

//////////////////////////
====== Ignoring What Subversion Ignores
//////////////////////////
====== Subversion에서 무시하는것 무시하기

//////////////////////////
If you clone a Subversion repository that has `svn:ignore` properties set anywhere, you'll likely want to set corresponding `.gitignore` files so you don't accidentally commit files that you shouldn't.
`git svn` has two commands to help with this issue.
The first is `git svn create-ignore`, which automatically creates corresponding `.gitignore` files for you so your next commit can include them.
//////////////////////////
Subversion 저장소를 클론하면 쓸데 없는 파일을 커밋하지 않도록 `svn:ignore` 속성을 `.gitignore` 파일로 만들고 싶을 것이다.
`git svn`에는 이 문제와 관련된 명령이 두 가지 있다.
하나는 `git svn create-ignore` 명령이다. 해당 위치에 커밋할 수 있는 `.gitignore` 파일을 생성해준다.

//////////////////////////
The second command is `git svn show-ignore`, which prints to stdout the lines you need to put in a `.gitignore` file so you can redirect the output into your project exclude file:
//////////////////////////
두 번째 방법은 `git svn show-ignore` 명령이다. `.gitignore`에 추가할 목록을 출력해 준다. 프로젝트의 exclude 파일로 결과를 리다이렉트할 수 있다.

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

//////////////////////////
That way, you don't litter the project with `.gitignore` files.
This is a good option if you're the only Git user on a Subversion team, and your teammates don't want `.gitignore` files in the project.
//////////////////////////
이렇게 하면 `.gitignore` 파일로 프로젝트를 더럽히지 않아도 된다.
혼자서만 Git을 사용하는 거라면 다른 팀원들은 프로젝트에 `.gitignore` 파일이 있는 것을 싫어 할 수 있다.

//////////////////////////
===== Git-Svn Summary
//////////////////////////
===== Git-Svn 요약

//////////////////////////
The `git svn` tools are useful if you're stuck with a Subversion server, or are otherwise in a development environment that necessitates running a Subversion server.
You should consider it crippled Git, however, or you'll hit issues in translation that may confuse you and your collaborators.
To stay out of trouble, try to follow these guidelines:
//////////////////////////
`git svn` 도구는 여러가지 이유로 Subversion 서버를 사용해야만 하는 상황에서 빛을 발한다. 하지만 Git의 모든 장점을 이용할 수는 없다.
Git과 Subversion은 다르기 때문에 혼란이 빚어질 수도 있다.
이런 문제에 빠지지 않기 위해서 다음 가이드라인을 지켜야 한다.

//////////////////////////
* Keep a linear Git history that doesn't contain merge commits made by `git merge`.
  Rebase any work you do outside of your mainline branch back onto it; don't merge it in.
* Don't set up and collaborate on a separate Git server.
  Possibly have one to speed up clones for new developers, but don't push anything to it that doesn't have a `git-svn-id` entry.
  You may even want to add a `pre-receive` hook that checks each commit message for a `git-svn-id` and rejects pushes that contain commits without it.
//////////////////////////
* Git 히스토리를 일직선으로 유지하라. `git merge`로 Merge 커밋이 생기지 않도록 하라.
  Merge 말고 Rebase로 변경사항을 Master 브랜치에 적용하라.
* 따로 Git 저장소 서버를 두지 말라.
  클론을 빨리 하기 위해서 잠깐 하나 만들어 쓰는 것은 무방하나 절대로 Git 서버에 Push하지는 말아야 한다.
  `pre-receive` 훅에서 `git-svn-id`가 들어 있는 커밋 메시지는 거절하는 방법도 괜찮다.

//////////////////////////
If you follow those guidelines, working with a Subversion server can be more bearable.
However, if it's possible to move to a real Git server, doing so can gain your team a lot more.
//////////////////////////
이러한 가이드라인을 잘 지키면 Subversion 서버도 쓸만하다.
그래도 Git 서버를 사용할 수 있으면 Git 서버를 사용하는 것이 훨씬 좋다.
