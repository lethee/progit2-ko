[[_distributed_git]]
//////////////////////////
== Distributed Git
//////////////////////////
== 분산 환경에서의 Git

(((distributed git)))
//////////////////////////
Now that you have a remote Git repository set up as a point for all the developers to share their code, and you're familiar with basic Git commands in a local workflow, you'll look at how to utilize some of the distributed workflows that Git affords you.
//////////////////////////
앞 장에서 다른 개발자와 코드를 공유하는 리모트 저장소를 만드는 법을 배웠다. 로컬에서 작업하는 데 필요한 기본적인 명령어에는 어느 정도 익숙해졌다. 이제는 분산 환경에서 Git이 제공하는 기능을 어떻게 효율적으로 사용할지를 배운다.

//////////////////////////
In this chapter, you'll see how to work with Git in a distributed environment as a contributor and an integrator.
That is, you'll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing.
//////////////////////////
이번 장에서는 분산 환경에서 Git을 어떻게 사용할 수 있을지 살펴본다. 프로젝트 기여자 입장과 여러 수정사항을 취합하는 관리자 입장에서 두루 살펴본다.
즉, 프로젝트 기여자 또는 관리자로서 작업물을 프로젝트에 어떻게 포함시킬지와 수 많은 개발자가 수행한 일을 취합하고 프로젝트를 운영하는 방법을 배운다.

include::sections/distributed-workflows.asc[]

include::sections/contributing.asc[]

include::sections/maintaining.asc[]

//////////////////////////
=== Summary
//////////////////////////
=== 요약

//////////////////////////
You should feel fairly comfortable contributing to a project in Git as well as maintaining your own project or integrating other users' contributions.
Congratulations on being an effective Git developer!
In the next chapter, you'll learn about how to use the largest and most popular Git hosting service, GitHub.
//////////////////////////
이제 Git 프로젝트에 기여하고, 자신의 프로젝트를 운영하고, 다른 사람이 기여한 내용을 통합하는 것 정도는 쉽게 할 수 있을 것이다.
일단 쓸만한 Git 개발자가 된 것을 축하한다.
다음 장에서 Git을 호스팅하는 가장 대중적이고 가장 큰 서비스인 GitHub에 대해 살펴볼 것이다.
