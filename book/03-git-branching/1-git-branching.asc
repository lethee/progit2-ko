[[_git_branching]]
//////////////////////////
== Git Branching
//////////////////////////
== Git 브랜치

(((branches)))
//////////////////////////
Nearly every VCS has some form of branching support.
Branching means you diverge from the main line of development and continue to do work without messing with that main line.
In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.
//////////////////////////
모든 버전 관리 시스템은 브랜치를 지원한다.
개발을 하다 보면 코드를 여러 개로 복사해야 하는 일이 자주 생긴다.
코드를 통째로 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있는데, 이렇게 독립적으로 개발하는 것이 브랜치다.

//////////////////////////
Some people refer to Git's branching model as its ``killer feature,'' and it certainly sets Git apart in the VCS community.
Why is it so special?
The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast.
Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day.
Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop.
//////////////////////////
사람들은 브랜치 모델이 Git의 최고의 장점이라고, Git이 다른 것들과 구분되는 특징이라고 말한다.
당최 어떤 점이 그렇게 특별한 것일까.
Git의 브랜치는 매우 가볍다. 순식간에 브랜치를 새로 만들고 브랜치 사이를 이동할 수 있다. 다른 버전 관리 시스템과는 달리 Git은 브랜치를 만들어 작업하고 나중에 Merge하는 방법을 권장한다.
심지어 하루에 수십 번씩해도 괜찮다.
Git 브랜치에 능숙해지면 개발 방식이 완전히 바뀌고 다른 도구를 사용할 수 없게 된다.

include::sections/nutshell.asc[]

include::sections/basic-branching-and-merging.asc[]

include::sections/branch-management.asc[]

include::sections/workflows.asc[]

include::sections/remote-branches.asc[]

include::sections/rebasing.asc[]

//////////////////////////
=== Summary
//////////////////////////
=== 요약

//////////////////////////
We've covered basic branching and merging in Git.
You should feel comfortable creating and switching to new branches, switching between branches and merging local branches together.
You should also be able to share your branches by pushing them to a shared server, working with others on shared branches and rebasing your branches before they are shared.
Next, we'll cover what you'll need to run your own Git repository-hosting server.
//////////////////////////
우리는 이 장에서 Git으로 브랜치를 만들고 Merge 의 기본적인 사용법을 다루었다.
이제 브랜치를 만들고 옮겨다니고 Merge하는 것에 익숙해졌을 것으로 생각한다.
브랜치를 Rebase해서 Push해서 공유하는 것 정도는 어렵지 않게 할 수 있을 것이다.
다음 장에서는 Git 저장소 서버를 직접 운영하는 방법을 설명한다.
