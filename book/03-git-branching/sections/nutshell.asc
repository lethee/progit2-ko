[[_git_branches_overview]]
//////////////////////////
=== Branches in a Nutshell
//////////////////////////
=== 브랜치란 무엇인가

//////////////////////////
To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.
//////////////////////////
Git이 브랜치를 다루는 과정을 이해하려면 우선 Git이 데이터를 어떻게 저장하는지 알아야 한다.

//////////////////////////
As you may remember from <<_getting_started>>, Git doesn't store data as a series of changesets or differences, but instead as a series of snapshots.
//////////////////////////
Git은 데이터를 Change Set이나 변경사항(Diff)으로 기록하지 않고 일련의 스냅샷으로 기록한다는 것을 <<_getting_started>> 에서 보여줬다.

//////////////////////////
When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.
This object also contains the author's name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.
//////////////////////////
커밋하면 Git은 현 Staging Area에 있는 데이터의 스냅샷에 대한 포인터, 저자나 커밋 메시지 같은 메타데이터, 이전 커밋에 대한 포인터 등을 포함하는 커밋 개체(커밋 Object)를 저장한다.
이전 커밋 포인터가 있어서 현재 커밋이 무엇을 기준으로 바뀌었는지를 알 수 있다. 최초 커밋을 제외한 나머지 커밋은 이전 커밋 포인터가 적어도 하나씩 있고 브랜치를 합친 Merge 커밋 같은 경우에는 이전 커밋 포인터가 여러 개 있다.

//////////////////////////
To visualize this, let's assume that you have a directory containing three files, and you stage them all and commit.
Staging the files checksums each one (the SHA-1 hash we mentioned in <<_getting_started>>), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:
//////////////////////////
파일이 3개 있는 디렉토리가 하나 있고 이 파일을 Staging Area에 저장하고 커밋하는 예제를 살펴 보자.
파일을 Stage하면 Git 저장소에 파일을 저장하고(Git은 이것을 Blob이라고 부른다) Staging Area에 해당 파일의 체크섬을 저장한다(<<_getting_started>> 에서 살펴본 SHA-1을 사용한다).

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'initial commit of my project'
----

//////////////////////////
When you create the commit by running `git commit`, Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository.
Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.(((git commands, commit)))
//////////////////////////
`git commit`으로 커밋하면 먼저 루트 디렉토리와 각 하위 디렉토리의 트리 개체를 체크섬과 함께 저장소에 저장한다.
그다음에 커밋 개체를 만들고 메타데이터와 루트 디렉토리 트리 개체를 가리키는 포인터 정보를 커밋 개체에 넣어 저장한다. 그래서 필요하면 언제든지 스냅샷을 다시 만들 수 있다.(((git commands, commit)))

//////////////////////////
Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.
//////////////////////////
이 작업을 마치고 나면 Git 저장소에는 다섯 개의 데이터 개체가 생긴다. 각 파일에 대한 Blob 세 개, 파일과 디렉토리 구조가 들어 있는 트리 개체 하나, 메타데이터와 루트 트리를 가리키는 포인터가 담긴 커밋 개체 하나이다.

//////////////////////////
.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]
//////////////////////////
.커밋과 트리 데이터
image::images/commit-and-tree.png[커밋과 트리 데이터]

//////////////////////////
If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.
//////////////////////////
다시 파일을 수정하고 커밋하면 이전 커밋이 무엇인지도 저장한다.

//////////////////////////
.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]
//////////////////////////
.커밋과 이전 커밋
image::images/commits-and-parents.png[커밋과 이전 커밋]

//////////////////////////
A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch name in Git is `master`.
As you start making commits, you're given a master branch that points to the last commit you made.
Every time you commit, it moves forward automatically.
//////////////////////////
Git의 브랜치는 커밋 사이를 가볍게 이동할 수 있는 어떤 포인터 같은 것이다.
기본적으로 Git은 `master` 브랜치를 만든다.
최초로 커밋하면 Git은 master라는 이름의 브랜치를 만든다.
커밋을 만들 때 마다 브랜치가 자동으로 가장 마지막 커밋을 가리키게 한다.

[NOTE]
//////////////////////////
====
The ``master'' branch in Git is not a special branch.(((master)))
It is exactly like any other branch.
The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.
====
//////////////////////////
====
Git 버전 관리 시스템에서 ``master'' 브랜치는 특별하지 않다.(((master)))
다른 브랜치와 다른 것이 없다.
다만 모든 저장소에서 ``master'' 브랜치가 존재하는 이유는 `git init` 명령으로 초기화할 때 자동으로 만들어진 이 브랜치를 애써 다른 이름으로 변경하지 않기 때문이다.
====

//////////////////////////
.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]
//////////////////////////
.브랜치와 커밋 히스토리
image::images/branch-and-history.png[브랜치와 커밋 히스토리]

[[_create_new_branch]]
//////////////////////////
==== Creating a New Branch
//////////////////////////
==== 새 브랜치 생성하기

(((branches, creating)))
//////////////////////////
What happens if you create a new branch?
Well, doing so creates a new pointer for you to move around.
Let's say you create a new branch called testing.
You do this with the `git branch` command:(((git commands, branch)))
//////////////////////////
브랜치를 하나 새로 만들면 어떨까.
브랜치를 하나 만들어서 놀자.
다음과 같이 `git branch` 명령으로
testing 브랜치를 만든다.(((git commands, branch)))

[source,console]
----
$ git branch testing
----

//////////////////////////
This creates a new pointer at the same commit you're currently on.
//////////////////////////
새로 만든 브랜치도 지금 작업하고 있던 마지막 커밋을 가리킨다.

//////////////////////////
.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]
//////////////////////////
.한 커밋 히스토리를 가리키는 두 브랜치
image::images/two-branches.png[한 커밋 히스토리를 가리키는 두 브랜치]

//////////////////////////
How does Git know what branch you're currently on?
It keeps a special pointer called `HEAD`.
Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
In Git, this is a pointer to the local branch you're currently on.
In this case, you're still on master.
The `git branch` command only _created_ a new branch – it didn't switch to that branch.
//////////////////////////
지금 작업 중인 브랜치가 무엇인지 Git은 어떻게 파악할까.
다른 버전 관리 시스템과는 달리 Git은 'HEAD'라는 특수한 포인터가 있다.
이 포인터는 지금 작업하는 로컬 브랜치를 가리킨다.
브랜치를 새로 만들었지만,
Git은 아직 master 브랜치를 가리키고 있다.
`git branch` 명령은 브랜치를 만들기만 하고 브랜치를 옮기지 않는다.

//////////////////////////
.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]
//////////////////////////
.현재 작업 중인 브랜치를 가리키는 HEAD
image::images/head-to-master.png[현재 작업 중인 브랜치를 가리키는 HEAD]

//////////////////////////
You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing. This option is called `--decorate`.
//////////////////////////
`git log` 명령에 `--decorate` 옵션을 사용하면 쉽게 브랜치가 어떤 커밋을 가리키는지도 확인할 수 있다.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

//////////////////////////
You can see the ``master'' and ``testing'' branches that are right there next to the `f30ab` commit.
//////////////////////////
``master''와 ``testing'' 이라는 브랜치가 `f30ab` 커밋 옆에 위치하여 이런식으로 브랜치가 가리키는 커밋을 확인할 수 있다.

[[_switching_branches]]
//////////////////////////
==== Switching Branches
//////////////////////////
==== 브랜치 이동하기

(((branches, switching)))
//////////////////////////
To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
//////////////////////////
`git checkout` 명령으로 다른 브랜치로 이동할 수 있다.(((git commands, checkout)))

[source,console]
----
$ git checkout testing
----

//////////////////////////
This moves `HEAD` to point to the `testing` branch.
//////////////////////////
이렇게 하면 HEAD는 testing 브랜치를 가리킨다.

//////////////////////////
.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]
//////////////////////////
.HEAD는 testing 브랜치를 가리킴
image::images/head-to-testing.png[HEAD는 testing 브랜치를 가리킴]

//////////////////////////
What is the significance of that?
Well, let's do another commit:
//////////////////////////
자, 이제 핵심이 보일 거다!
커밋을 새로 한 번 해보자.

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

//////////////////////////
.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]
//////////////////////////
.HEAD가 가리키는 testing 브랜치가 새 커밋을 가리킴
image::images/advance-testing.png[HEAD가 가리키는 testing 브랜치가 새 커밋을 가리킴]

//////////////////////////
This is interesting, because now your testing branch has moved forward, but your master branch still points to the commit you were on when you ran `git checkout` to switch branches.
Let's switch back to the master branch:
//////////////////////////
이 부분이 흥미롭다. 새로 커밋해서 testing 브랜치는 앞으로 이동했다. 하지만, `master` 브랜치는 여전히 이전 커밋을 가리킨다.
`master` 브랜치로 되돌아가보자.

[source,console]
----
$ git checkout master
----

//////////////////////////
.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]
//////////////////////////
.HEAD가 Checkout한 브랜치로 이동함
image::images/checkout-master.png[HEAD가 Checkout한 브랜치로 이동함]

//////////////////////////
That command did two things.
It moved the HEAD pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to.
This also means the changes you make from this point forward will diverge from an older version of the project.
It essentially rewinds the work you've done in your testing branch so you can go in a different direction.
//////////////////////////
방금 실행한 명령이 한 일은 두 가지다.
master 브랜치가 가리키는 커밋을 HEAD가 가리키게 하고 워킹 디렉토리의 파일도 그 시점으로 되돌려 놓았다.
앞으로 커밋을 하면 다른 브랜치의 작업들과 별개로 진행되기 때문에
testing 브랜치에서 임시로 작업하고 원래 master 브랜치로 돌아와서 하던 일을 계속할 수 있다.

[NOTE]
//////////////////////////
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====
//////////////////////////
.브랜치를 이동하면 워킹 디렉토리의 파일이 변경된다
====
브랜치를 이동하면 워킹 디렉토리의 파일이 변경된다는 점을 기억해두어야 한다.
이전에 작업했던 브랜치로 이동하면 워킹 디렉토리의 파일은 그 브랜치에서 가장 마지막으로 했던 작업 내용으로 변경된다.
파일 변경시 문제가 있어 브랜치를 이동시키는게 불가능한 경우 Git은 브랜치 이동 명령을 수행하지 않는다.
====

//////////////////////////
Let's make a few changes and commit again:
//////////////////////////
파일을 수정하고 다시 커밋을 해보자.

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

//////////////////////////
Now your project history has diverged (see <<divergent_history>>).
You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
And you did all that with simple `branch`, `checkout`, and `commit` commands.
//////////////////////////
프로젝트 히스토리는 분리돼 진행한다(<<divergent_history>>).
우리는 브랜치를 하나 만들어 그 브랜치에서 일을 좀 하고, 다시 원래 브랜치로 되돌아와서 다른 일을 했다.
두 작업 내용은 서로 독립적으로 각 브랜치에 존재한다. 커밋 사이를 자유롭게 이동하다가 때가 되면 두 브랜치를 Merge한다.
간단히 `branch`, `checkout`, `commit` 명령을 써서 말이다.

[[divergent_history]]
//////////////////////////
.Divergent history
image::images/advance-master.png[Divergent history.]
//////////////////////////
.갈라지는 브랜치
image::images/advance-master.png[갈라지는 브랜치]

//////////////////////////
You can also see this easily with the `git log` command.
If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.
//////////////////////////
`git log` 명령으로 쉽게 확인할 수 있다.
현재 브랜치가 가리키고 있는 히스토리가 무엇이고 어떻게 갈라져 나왔는지 보여준다. `git log --oneline --decorate --graph --all`이라고 실행하면 히스토리를 출력한다.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

//////////////////////////
Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).
//////////////////////////
실제로 Git의 브랜치는 어떤 한 커밋을 가리키는 40글자의 SHA-1 체크섬 파일에 불과하기 때문에 만들기도 쉽고 지우기도 쉽다.
새로 브랜치를 하나 만드는 것은 41바이트 크기의 파일을(40자와 줄 바꿈 문자) 하나 만드는 것에 불과하다.

//////////////////////////
This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.
//////////////////////////
브랜치를 만들어야 하면 프로젝트를 통째로 복사해야 하는 다른 버전 관리 도구와 Git의 차이는 극명하다.
통째로 복사하는 작업은 프로젝트 크기에 따라 다르겠지만 수십 초에서 수십 분까지 걸린다. 그에 비해 Git은 순식간이다.
게다가 커밋을 할 때마다 이전 커밋의 정보를 저장하기 때문에 Merge할 때 어디서부터(Merge Base) 합쳐야 하는지 안다.
이런 특징은 개발자들이 수시로 브랜치를 만들어 사용하게 한다.

//////////////////////////
Let's see why you should do so.
//////////////////////////
이제 왜 그렇게 브랜치를 수시로 만들고 사용해야 하는지 알아보자.
