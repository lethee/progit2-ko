[[_branch_management]]
//////////////////////////
=== Branch Management
//////////////////////////
=== 브랜치 관리

(((branches, managing)))
//////////////////////////
Now that you've created, merged, and deleted some branches, let's look at some branch-management tools that will come in handy when you begin using branches all the time.
//////////////////////////
지금까지 브랜치를 만들고, Merge하고, 삭제하는 방법에 대해서 살펴봤다. 브랜치를 관리하는 데 필요한 다른 명령도 살펴보자.

//////////////////////////
The `git branch` command does more than just create and delete branches.(((git commands, branch)))
If you run it with no arguments, you get a simple listing of your current branches:
//////////////////////////
`git branch` 명령은 단순히 브랜치를 만들고 삭제하는 것이 아니다.(((git commands, branch)))
아무런 옵션 없이 실행하면 브랜치의 목록을 보여준다.

[source,console]
----
$ git branch
  iss53
* master
  testing
----

//////////////////////////
Notice the `*` character that prefixes the `master` branch: it indicates the branch that you currently have checked out (i.e., the branch that `HEAD` points to).
This means that if you commit at this point, the `master` branch will be moved forward with your new work.
To see the last commit on each branch, you can run `git branch -v`:
//////////////////////////
`*` 기호가 붙어 있는 `master`브랜치는 현재 Checkout해서 작업하는 브랜치를 나타낸다.
즉, 지금 수정한 내용을 커밋하면 `master` 브랜치에 커밋되고 포인터가 앞으로 한 단계 나아간다.
`git branch -v` 명령을 실행하면 브랜치마다 마지막 커밋 메시지도 함께 보여준다.

[source,console]
----
$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 add scott to the author list in the readmes
----

//////////////////////////
The useful `--merged` and `--no-merged` options can filter this list to branches that you have or have not yet merged into the branch you're currently on.
To see which branches are already merged into the branch you're on, you can run `git branch --merged`:
//////////////////////////
각 브랜치가 지금 어떤 상태인지 확인하기에 좋은 옵션도 있다. 현재 Checkout한 브랜치를 기준으로 `--merged`와 `--no-merged` 옵션을 사용하여 Merge된 브랜치인지 그렇지 않은지 필터링해 볼 수 있다.
`git branch --merged` 명령으로 이미 Merge한 브랜치 목록을 확인한다.

[source,console]
----
$ git branch --merged
  iss53
* master
----

//////////////////////////
Because you already merged in `iss53` earlier, you see it in your list.
Branches on this list without the `*` in front of them are generally fine to delete with `git branch -d`; you've already incorporated their work into another branch, so you're not going to lose anything.
//////////////////////////
`iss53` 브랜치는 앞에서 이미 Merge했기 때문에 목록에 나타난다.
`*` 기호가 붙어 있지 않은 브랜치는 `git branch -d` 명령으로 삭제해도 되는 브랜치다. 이미 다른 브랜치와 Merge했기 때문에 삭제해도 정보를 잃지 않는다.

//////////////////////////
To see all the branches that contain work you haven't yet merged in, you can run `git branch --no-merged`:
//////////////////////////
반대로 현재 Checkout한 브랜치에 Merge하지 않은 브랜치를 살펴보려면 `git branch --no-merged` 명령을 사용한다.

[source,console]
----
$ git branch --no-merged
  testing
----

//////////////////////////
This shows your other branch.
Because it contains work that isn't merged in yet, trying to delete it with `git branch -d` will fail:
//////////////////////////
위에는 없었던 다른 브랜치가 보인다.
아직 Merge하지 않은 커밋을 담고 있기 때문에 `git branch -d` 명령으로 삭제되지 않는다.

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

//////////////////////////
If you really do want to delete the branch and lose that work, you can force it with `-D`, as the helpful message points out.
//////////////////////////
Merge하지 않은 브랜치를 강제로 삭제하려면 `-D` 옵션으로 삭제한다.
