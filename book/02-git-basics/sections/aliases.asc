[[_git_aliases]]
//////////////////////////
=== Git Aliases
//////////////////////////
=== Git Alias

(((aliases)))
//////////////////////////
Before we finish this chapter on basic Git, there's just one little tip that can make your Git experience simpler, easier, and more familiar: aliases.
We won't refer to them or assume you've used them later in the book, but you should probably know how to use them.
//////////////////////////
Git의 기초를 마치기 전에 Git을 좀 더 쉽고 편안하게 쓸 수 있게 만들어 줄 Alias 라는 팁 알려주려 한다.
우리는 이 책에서 이 팁을 다시 거론하지 않고 이런 팁을 알고 있다고 가정한다. 그래서 알고 있는 것이 좋다.

//////////////////////////
Git doesn't automatically infer your command if you type it in partially.
If you don't want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.(((git commands, config)))
Here are a couple of examples you may want to set up:
//////////////////////////
명령을 완벽하게 입력하지 않으면 Git은 알아듣지 못한다.
Git의 명령을 전부 입력하는 것이 귀찮다면 `git config`를 사용하여 각 명령의 Alias을 쉽게 만들 수 있다.(((git commands, config)))
아래는 Alias을 만드는 예이다.

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

//////////////////////////
This means that, for example, instead of typing `git commit`, you just need to type `git ci`.
As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.
//////////////////////////
이제 `git commit` 대신 `git ci`만으로도 커밋할 수 있다.
Git을 계속 사용한다면 다른 명령어도 자주 사용하게 될 것이다. 주저말고 자주 사용하는 명령은 Alias을 만들어 편하게 사용하시길 바란다.

//////////////////////////
This technique can also be very useful in creating commands that you think should exist.
For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:
//////////////////////////
이미 있는 명령을 편리하고 새로운 명령으로 만들어 사용할 수 있다.
예를 들어 파일을 Unstage 상태로 변경하는 명령을 만들어서 불편함을 덜 수 있다. 아래와 같이 unstage 라는 Alias을 만든다.

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

//////////////////////////
This makes the following two commands equivalent:
//////////////////////////
아래 두 명령은 동일한 명령이다.

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

//////////////////////////
This seems a bit clearer.
It's also common to add a `last` command, like this:
//////////////////////////
한결 간결해졌다.
추가로 `last` 명령을 만들어 보자:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

//////////////////////////
This way, you can see the last commit easily:
//////////////////////////
이제 최근 커밋을 좀 더 쉽게 확인할 수 있다.

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

//////////////////////////
As you can tell, Git simply replaces the new command with whatever you alias it for.
However, maybe you want to run an external command, rather than a Git subcommand.
In that case, you start the command with a `!` character.
This is useful if you write your own tools that work with a Git repository.
We can demonstrate by aliasing `git visual` to run `gitk`:
//////////////////////////
이것으로 쉽게 새로운 명령을 만들 수 있다.
그리고 Git의 명령어뿐만 아니라 외부 명령어도 실행할 수 있다.
`!`를 제일 앞에 추가하면 외부 명령을 실행한다.
커스텀 스크립트를 만들어서 사용할 때 매우 유용하다.
아래 명령은 `git visual`이라고 입력하면 `gitk`가 실행된다.

[source,console]
----
$ git config --global alias.visual "!gitk"
----
